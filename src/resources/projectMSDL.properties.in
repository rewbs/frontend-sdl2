### Application window settings

# If set to true, the application will start in fullscreen mode
window.fullscreen = false

# If set to true, the application windows will have no window decorations if the OS supports it.
# This will possibly make the window immovable.
window.borderless = false

# Set the monitor to initially display the window on.
# 0 will use system defaults for placement, 1 and above select a specific monitor.
# If the number is too large, that last available monitor is used.
window.monitor = 0

# Two fullscreen modes are supported:
# - windowed: Uses a borderless window, filling the current monitor.
#             Does not change the current resolution.
# - exclusive: Sets the resolution to window.fullscreen.width/height and runs in exclusive mode,
#              like a game.
window.fullscreen.exclusiveMode = false

# Only used if fullscreen mode is "exclusive"
# If any value is set to 0, the nearest available fullscreen resolution for the current window size is used.
window.fullscreen.width = 0
window.fullscreen.height = 0

# Window size if not in fullscreen
window.width = 1024
window.height = 768

# Override system default window position
window.overridePosition = false

# If overridePosition is true, the window will be placed at these coordinates.
# Note this will include any window decoration, to the actual window contents might be offset to the bottom-right.
window.left = 0
window.top = 0

# Wait for vertical sync interval before displaying the next frame.
# This will limit max FPS to the vertical sync frequency but prevents tearing.
window.waitForVerticalSync = true

# Tries to use adaptive vertical sync if waitForVerticalSync is enabled.
# When using a monitor capable of adaptive sync, setting projectM.fps to 0 gives the best results.
window.adaptiveVerticalSync = true

# If true, displays the current preset name (and locked state) in the window title.
# If false, the window title is fixed to "projectM".
window.displayPresetNameInTitle = true

### projectM settings

# Default path where projectMSDL will search for presets and textures. The directory will be searched recursively.
# To add additional preset paths, add them as shown in the examples below.
projectM.presetPath = @DEFAULT_PRESETS_PATH@
#projectM.presetPath.1 = /another/preset/path
#projectM.presetPath.2 = /yet/another/preset/path

# Default path where projectMSDL will search for additional textures. The directory will be searched recursively.
# To add additional texture paths, add them as shown in the examples below.
projectM.texturePath = @DEFAULT_TEXTURES_PATH@
#projectM.texturePath.1 = /another/texture/path
#projectM.texturePath.2 = /yet/another/texture/path

# If true, displays the built-in projectM logo preset on startup.
projectM.enableSplash = false

# Preset display duration in seconds. If the time has passed, a soft cut is done to the next preset.
projectM.displayDuration = 30

# If enabled, presets are selected randomly from the current playlist. Otherwise, they are played in order.
projectM.shuffleEnabled = true

# If enabled, the current/initial preset can only be changed manually.
projectM.presetLocked = false

# Target FPS, usually 60.
projectM.fps = 60

# Per-pixel mesh size. This is the grid in which "per-pixel" code is executed, once per cell.
# Do not set this value too high, as it severely impacts performance. On low-end hardware, set this to a small
# value, e.g. 64x32. This does *NOT* affect the actual render/shader resolution!
projectM.meshX = 200
projectM.meshY = 125

# Transition time in seconds for soft cuts
projectM.transitionDuration = 3

# Hard cuts are immediate presets transitions on an intensive beat.
# If enabled, after "hardCutDuration" seconds have passed and an intensive beat is detected,
# a hard cut is performed. "hardCutDuration" should be set lower than "displayDuration" to have an effect.
projectM.hardCutsEnabled = false
projectM.hardCutDuration = 20

# Controls aspect ration correction in presets. Not all presets use aspect ratio, so this setting  only has an effect
# on presets using the aspect ration actively.
projectM.aspectCorrectionEnabled = true


projectM.presetFile = /Users/home/code/projectm/presets/tests/240-wave-smooth-00.milk

### Logging settings

# For detailed information on how to configure logging, please refer to the POCO documentation:
# https://docs.pocoproject.org/current/Poco.Util.LoggingConfigurator.html

# Set log level to debug for all components
#logging.loggers.root.level = debug



### Logging configuration

# Verbose log format, includes process/thread ID, source etc.
# See https://docs.pocoproject.org/current/Poco.PatternFormatter.html for available placeholders.
# The "times" property can be either set to "local" (default) or "UTC".
logging.formatters.verbose.class = PatternFormatter
logging.formatters.verbose.pattern = %Y-%m-%dT%h:%M:%S.%iZ [%P][%I] %p: [%s] %t
logging.formatters.verbose.times = local

# Simple log format, only date/time and the message
logging.formatters.simple.class = PatternFormatter
logging.formatters.simple.pattern = %Y-%m-%dT%h:%M:%SZ %t
logging.formatters.simple.times = local

# Default file log, creates a new one if it reaches 1 MiB and keeps a single old log.
# See https://docs.pocoproject.org/current/Poco.FileChannel.html for all possible options.
logging.channels.file.class = FileChannel
logging.channels.file.path = ${system.configHomeDir}/projectM/${application.baseName}.log
logging.channels.file.rotation = 1M
logging.channels.file.archive = number
logging.channels.file.compress = false
logging.channels.file.purgeCount = 1
logging.channels.file.flush = false
logging.channels.file.formatter = simple

# Console logging. Only available on UNIX platforms and inside a Windows debugging session.
logging.channels.console.class = ConsoleChannel
logging.channels.console.formatter = simple

# Duplicates log messages to both console and file channels.
logging.channels.split.class = SplitterChannel
logging.channels.split.channel = console,file

# Memory queue for async logging to improve performance.
logging.channels.async.class = AsyncChannel
logging.channels.async.channel = split

# Default logging settings.
logging.loggers.root.level = information
logging.loggers.root.channel = async

# You can configure log levels, channels etc. for each message source (logger) individually.
# See https://docs.pocoproject.org/current/Poco.Util.LoggingConfigurator.html for details.
# Example:
#     logging.loggers.AudioCapture.level = debug
